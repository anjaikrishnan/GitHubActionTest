version: '3.8'

services:
  # Database
  postgres:
    image: postgres:15
    container_name: postgres-db
    environment:
      POSTGRES_DB: enterprise_reporting
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    networks:
      - reporting-network

  # Keycloak for Authentication
  keycloak:
    image: quay.io/keycloak/keycloak:22.0
    container_name: keycloak
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin123
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres:5432/enterprise_reporting
      KC_DB_USERNAME: postgres
      KC_DB_PASSWORD: postgres123
      KC_HOSTNAME_STRICT: false
      KC_HTTP_ENABLED: true
    ports:
      - "8080:8080"
    depends_on:
      - postgres
    command: start-dev
    networks:
      - reporting-network

  # API Gateway Service
  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    container_name: api-gateway
    environment:
      DATABASE_URL: postgresql://postgres:postgres123@postgres:5432/enterprise_reporting
      KEYCLOAK_URL: http://keycloak:8080
      LLM_SERVICE_URL: http://llm-service:8001
      ANALYTICS_SERVICE_URL: http://analytics-service:4000
    ports:
      - "8000:8000"
    depends_on:
      - postgres
      - keycloak
    volumes:
      - ./api-gateway:/app
    networks:
      - reporting-network

  # LLM Service for Natural Language Queries
  llm-service:
    build:
      context: ./llm-service
      dockerfile: Dockerfile
    container_name: llm-service
    environment:
      DATABASE_URL: postgresql://postgres:postgres123@postgres:5432/enterprise_reporting
      OPENAI_API_KEY: ${OPENAI_API_KEY:-}
    ports:
      - "8001:8001"
    depends_on:
      - postgres
    volumes:
      - ./llm-service:/app
    networks:
      - reporting-network

  # Analytics Service (Cube.js)
  analytics-service:
    build:
      context: ./analytics-service
      dockerfile: Dockerfile
    container_name: analytics-service
    environment:
      CUBEJS_DB_TYPE: postgres
      CUBEJS_DB_HOST: postgres
      CUBEJS_DB_NAME: enterprise_reporting
      CUBEJS_DB_USER: postgres
      CUBEJS_DB_PASS: postgres123
      CUBEJS_API_SECRET: secret123
      CUBEJS_DEV_MODE: true
    ports:
      - "4000:4000"
    depends_on:
      - postgres
    volumes:
      - ./analytics-service:/app
    networks:
      - reporting-network

  # Frontend Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:8000
      NEXT_PUBLIC_KEYCLOAK_URL: http://localhost:8080
      NEXT_PUBLIC_ANALYTICS_URL: http://localhost:4000
    ports:
      - "3000:3000"
    depends_on:
      - api-gateway
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - reporting-network

volumes:
  postgres_data:

networks:
  reporting-network:
    driver: bridge